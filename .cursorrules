# Cursor Rules - Projeto TypeScript Monorepo

## Visão Geral do Projeto
Este é um projeto TypeScript monorepo com backend em NestJS e frontend em React, seguindo Clean Architecture, SOLID principles e Use Cases.

**Status Atual**: ✅ **BACKEND COMPLETO** - Testes BDD 100% passando (38/38 cenários)

## Estrutura do Projeto

### Organização de Pastas
```
gwan-transcribe/
├── doc/                          # Documentação do projeto
│   ├── project_status.md         # Status de implementação ✅ ATUALIZADO
│   ├── tasks.md                  # Detalhamento de tarefas ✅ ATUALIZADO
│   └── architecture/             # Documentação de arquitetura
├── backend/                      # Aplicação NestJS ✅ COMPLETO
│   ├── src/
│   │   ├── modules/             # Módulos da aplicação
│   │   ├── shared/              # Código compartilhado
│   │   ├── infrastructure/      # Camada de infraestrutura
│   │   ├── application/         # Camada de aplicação (Use Cases)
│   │   └── domain/              # Camada de domínio
│   └── package.json
├── frontend/                     # Aplicação React ⏳ PENDENTE
│   ├── src/
│   │   ├── components/          # Componentes React
│   │   ├── hooks/               # Custom hooks
│   │   ├── services/            # Serviços de API
│   │   ├── types/               # Tipos TypeScript
│   │   └── utils/               # Utilitários
│   └── package.json
├── shared/                       # Código compartilhado
│   ├── types/                   # Tipos compartilhados
│   └── utils/                   # Utilitários compartilhados
└── package.json                 # Package.json raiz (workspace)
```

## Padrões de Arquitetura

### Clean Architecture (Backend) ✅ IMPLEMENTADO
- **Domain Layer**: Entidades, Value Objects, Interfaces de repositório
- **Application Layer**: Use Cases, DTOs, Interfaces de serviços
- **Infrastructure Layer**: Implementações concretas, banco de dados, APIs externas
- **Presentation Layer**: Controllers, Middlewares, Guards

### SOLID Principles ✅ IMPLEMENTADO
- **Single Responsibility**: Cada classe/função tem uma única responsabilidade
- **Open/Closed**: Aberto para extensão, fechado para modificação
- **Liskov Substitution**: Subtipos são substituíveis por seus tipos base
- **Interface Segregation**: Interfaces específicas ao invés de interfaces grandes
- **Dependency Inversion**: Depender de abstrações, não de implementações

### Use Cases Pattern ✅ IMPLEMENTADO
- Cada funcionalidade de negócio tem um Use Case dedicado
- Use Cases são independentes de frameworks
- Input/Output através de DTOs bem definidos

## Convenções de Código

### TypeScript
- Sempre usar tipos explícitos
- Preferir interfaces sobre types quando possível
- Usar enums para valores constantes
- Implementar strict mode no tsconfig.json

### Nomenclatura
- **Classes**: PascalCase (ex: UserService)
- **Interfaces**: PascalCase com prefixo I (ex: IUserRepository)
- **Funções/Variáveis**: camelCase (ex: getUserById)
- **Constantes**: UPPER_SNAKE_CASE (ex: API_BASE_URL)
- **Arquivos**: kebab-case (ex: user-service.ts)

### Estrutura de Arquivos
- Um arquivo por classe/interface
- Agrupar arquivos relacionados em pastas
- Usar index.ts para exports
- Manter arquivos com máximo 200-300 linhas

## Backend (NestJS) ✅ COMPLETO

### Estrutura de Módulos
```
src/modules/user/
├── domain/
│   ├── entities/
│   ├── value-objects/
│   └── repositories/
├── application/
│   ├── use-cases/
│   ├── dto/
│   └── interfaces/
├── infrastructure/
│   ├── repositories/
│   ├── controllers/
│   └── services/
└── user.module.ts
```

### Padrões de Implementação ✅ IMPLEMENTADO
- Usar decorators do NestJS (@Injectable, @Controller, etc.)
- Implementar injeção de dependência
- Usar DTOs para validação de entrada
- Implementar interceptors para logging/erro
- Usar guards para autenticação/autorização

### Use Cases ✅ IMPLEMENTADO
- Cada Use Case tem um método `execute()`
- Input/Output através de DTOs
- Não depender de frameworks externos
- Implementar tratamento de erros

## Frontend (React) ⏳ PENDENTE

### Estrutura de Componentes
- Componentes funcionais com hooks
- Custom hooks para lógica reutilizável
- Context API para estado global
- Props tipadas com interfaces

### Padrões de Estado
- useState para estado local
- useContext para estado compartilhado
- useReducer para estado complexo
- Evitar prop drilling

### Serviços de API
- Axios para requisições HTTP
- Interceptors para headers/tokens
- Tipagem forte para responses
- Error handling centralizado

## Documentação ✅ ATUALIZADA

### Pasta /doc
- **project_status.md**: Status atual de implementação ✅ ATUALIZADO
- **tasks.md**: Lista detalhada de tarefas com status ✅ ATUALIZADO
- **prd.md**: Product Requirements Document (requisitos do produto)
- **architecture/**: Documentação de arquitetura
- **api/**: Documentação de APIs
- **deployment/**: Guias de deploy

### README.md
- Deve apontar para documentação em /doc
- Incluir links para project_status.md e tasks.md
- Guia rápido de setup
- Links para documentação de arquitetura

### Atualização Obrigatória
- **project_status.md** deve ser mantido sempre atualizado com o status real de implementação ✅ ATUALIZADO
- **tasks.md** deve ser atualizado conforme tarefas são executadas ✅ ATUALIZADO
- **prd.md** deve ser respeitado como fonte da verdade para requisitos do produto
- Qualquer mudança nos requisitos deve ser refletida no prd.md primeiro

## Boas Práticas ✅ IMPLEMENTADAS

### Código
- Evitar duplicação de código
- **IMPORTANTE**: Usar biblioteca de logging estruturado (Winston) ao invés de console.log ✅ IMPLEMENTADO
- Implementar logging estruturado ✅ IMPLEMENTADO
- Usar environment variables ✅ IMPLEMENTADO
- Implementar error handling robusto ✅ IMPLEMENTADO
- Seguir princípios de segurança ✅ IMPLEMENTADO

### Performance
- Lazy loading de módulos
- Code splitting no frontend
- Caching estratégico
- Otimização de queries

### Manutenibilidade
- Código auto-documentado
- Comentários apenas quando necessário
- Refatoração contínua
- Revisão de código

## Configurações ✅ IMPLEMENTADAS

### TypeScript
- Strict mode habilitado ✅
- NoImplicitAny: true ✅
- StrictNullChecks: true ✅
- Path mapping para imports ✅

### ESLint/Prettier
- Configuração consistente ✅
- Auto-format no save ✅
- Regras específicas para React/TypeScript ✅

### Git
- Conventional commits
- Branch naming: feature/, bugfix/, hotfix/
- Pull request reviews obrigatórios

## Desenvolvimento

### Workflow
1. Criar branch a partir de main
2. Implementar feature/fix
3. Commits atômicos e descritivos
4. Pull request com descrição clara
5. Code review obrigatório
6. Merge após aprovação

### Debugging
- Logs estruturados ✅ IMPLEMENTADO
- Error boundaries no frontend
- Debug mode configurável
- Stack traces detalhados

## Deploy e Infraestrutura

### Ambientes
- Development (Docker Compose)
- Production (Portainer/Docker Swarm)

### Configuração
- Environment variables por ambiente
- Secrets management
- Health checks
- Monitoring e alerting
- Containerização com Docker
- Orquestração com Portainer

### URLs de Produção
- **API**: api.transcribe.gwan.br
- **Frontend**: transcribe.gwan.br
- **Portainer**: Servidor Portainer

### Sistema de Filas
- **RabbitMQ** para processamento assíncrono
- Filas para transcrição de áudio
- Filas para envio de emails
- Workers para processamento em background

## Regras Específicas

### Não Criar
- Testes unitários (conforme especificação)
- Código duplicado
- Arquivos muito longos (>300 linhas)
- Dependências desnecessárias

### Sempre Implementar
- Error handling ✅ IMPLEMENTADO
- Logging ✅ IMPLEMENTADO
- Validação de entrada ✅ IMPLEMENTADO
- Tipagem forte ✅ IMPLEMENTADO
- Documentação de APIs ✅ IMPLEMENTADO
- Atualização do project_status.md após mudanças ✅ ATUALIZADO
- Atualização do tasks.md conforme execução ✅ ATUALIZADO
- Respeito aos requisitos definidos no prd.md

## Testes BDD com Cucumber ✅ COMPLETO

### Estrutura de Testes
```
backend/
├── tests/
│   ├── bdd/
│   │   ├── features/           # Arquivos .feature ✅ 2 arquivos
│   │   ├── steps/              # Step definitions ✅ 3 arquivos
│   │   ├── support/            # Hooks e configurações ✅ 1 arquivo
│   │   └── world/              # World object e helpers ✅ 1 arquivo
│   └── cucumber.js             # Configuração do Cucumber ✅
```

### Padrões de Teste ✅ IMPLEMENTADO
- **Features**: Descrever cenários em linguagem natural ✅ 38 cenários
- **Step Definitions**: Implementar em TypeScript ✅ 3 arquivos
- **World Object**: Compartilhar estado entre steps ✅ CustomWorld
- **HTTP Client**: Axios para requisições HTTP ✅
- **Assertions**: Chai para validações ✅

### Comandos de Teste ✅ FUNCIONANDO
```bash
# Executar todos os testes BDD ✅ 38/38 passando
pnpm run test:bdd

# Executar testes específicos ✅
pnpm run test:bdd -- --grep "autenticação"

# Gerar relatório HTML ✅
pnpm run test:bdd:report

# Restaurar usuário de teste automaticamente ✅
# Executado automaticamente após cada teste
```

### Restauração Automática ✅ IMPLEMENTADO
- **Estado padrão**: `{"name": "Pedro Almeida", "email": "pedro.almeida@gmail.com"}`
- **Execução**: Automática ao final dos testes BDD ✅
- **Token**: `test-token-pedro-almeida` ✅
- **Logs**: Confirmação no console ✅

## PowerShell Commands ✅ ATUALIZADO

### Comandos Corretos
```powershell
# Executar comandos um a um (não usar &&)
pnpm run dev; Start-Sleep 5; Invoke-WebRequest -Uri "http://localhost:3000/api/v1/health"

# Testar APIs
Invoke-WebRequest -Uri "http://localhost:3000/api/v1/auth/request-otp" -Method POST -Headers @{"Content-Type"="application/json"} -Body '{"email":"test@example.com","name":"Test User"}'

# Verificar processos
Get-Process -Name "node" | Stop-Process -Force

# Criar diretórios
New-Item -ItemType Directory -Path "backend/tests/bdd" -Force
```

### Variáveis de Teste ✅ CONFIGURADAS
```powershell
$baseUrl = "http://localhost:3000/api/v1"
$testToken = "test-token-pedro-almeida"
```

## Logging ✅ OTIMIZADO

### Configurações Implementadas
- **Winston**: Logging estruturado ✅
- **Logs Limpos**: Queries SQL removidas ✅
- **Performance**: Otimizada ✅
- **Contexto**: Cada log tem contexto específico ✅

### Exemplo de Log
```
2025-08-05T01:15:28.460Z [UserController] info: Ativação de conta solicitada para usuário: d893cff7-caee-4d4a-a008-9001fb471ab1
```

## Status Atual do Projeto ✅ ATUALIZADO

### ✅ Concluído
- **Backend NestJS**: 100% funcional
- **Testes BDD**: 38/38 cenários passando
- **Logging**: Estruturado e limpo
- **Validações**: Robustas e funcionando
- **Documentação**: Atualizada

### ⏳ Em Andamento
- **Frontend React**: A ser implementado
- **Docker**: Configuração pendente
- **Deploy**: A ser implementado

### 🎯 Próximos Passos
1. Implementar Frontend React
2. Configurar Docker
3. Implementar Deploy

---

**Última atualização**: 05/08/2025  
**Status**: ✅ **BACKEND PRONTO PARA PRODUÇÃO**