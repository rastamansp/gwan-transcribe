### Gwan Transcribe - User Module Tests
### Testes específicos para o módulo de usuários

@baseUrl = http://localhost:3000/api/v1
@contentType = application/json
@testToken = test-token-pedro-almeida

### ========================================
### CONFIGURAÇÃO INICIAL
### ========================================

### Health Check (verificar se a API está rodando)
GET {{baseUrl}}/health
Content-Type: {{contentType}}

### ========================================
### GET USER PROFILE
### ========================================

### Get User Profile - Sucesso (com token válido)
GET {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

### Get User Profile - Sem token (deve retornar 401)
GET {{baseUrl}}/users/profile
Content-Type: {{contentType}}

### Get User Profile - Token inválido (deve retornar 401)
GET {{baseUrl}}/users/profile
Authorization: Bearer token-invalido
Content-Type: {{contentType}}

### ========================================
### UPDATE USER PROFILE
### ========================================

### Update User Profile - Sucesso (atualizar nome)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro Henrique Almeida"
}

### Update User Profile - Sucesso (atualizar email)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "email": "pedro.almeida@gmail.com"
}

### Update User Profile - Sucesso (atualizar nome e email)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro H. Almeida",
  "email": "pedro.h.almeida@gmail.com"
}

### Update User Profile - Email já existe (deve retornar 409)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "email": "test@example.com"
}

### Update User Profile - Nome muito longo (deve retornar 400)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Nome muito longo que excede o limite máximo permitido pela validação do sistema de usuários com mais de 100 caracteres para testar se a validação está funcionando corretamente"
}

### Update User Profile - Nome null (deve retornar 400)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": null
}

### Update User Profile - Nome vazio (deve retornar 400)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": ""
}

### Update User Profile - Body vazio (deve retornar 400)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
}

### Update User Profile - Email inválido (deve retornar 400)
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "email": "email-invalido"
}

### Update User Profile - Sem token (deve retornar 401)
PUT {{baseUrl}}/users/profile
Content-Type: {{contentType}}

{
  "name": "Pedro Almeida"
}

### ========================================
### DELETE USER PROFILE (DEACTIVATE)
### ========================================

### Deactivate User Profile - Sucesso
DELETE {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

### Deactivate User Profile - Sem token (deve retornar 401)
DELETE {{baseUrl}}/users/profile
Content-Type: {{contentType}}

### Deactivate User Profile - Usuário já inativo (deve retornar 401)
DELETE {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

### ========================================
### GET USER STATISTICS
### ========================================

### Get User Statistics - Sucesso
GET {{baseUrl}}/users/statistics
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

### Get User Statistics - Sem token (deve retornar 401)
GET {{baseUrl}}/users/statistics
Content-Type: {{contentType}}

### Get User Statistics - Token inválido (deve retornar 401)
GET {{baseUrl}}/users/statistics
Authorization: Bearer token-invalido
Content-Type: {{contentType}}

### ========================================
### TESTES DE STRESS - USER MODULE
### ========================================

### Múltiplas requisições de perfil simultâneas
GET {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

###

GET {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

###

GET {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

### Múltiplas atualizações de perfil simultâneas
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro Almeida - Teste 1"
}

###

PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro Almeida - Teste 2"
}

###

PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro Almeida - Teste 3"
}

### ========================================
### TESTES DE VALIDAÇÃO - USER MODULE
### ========================================

### Update Profile - Nome com caracteres especiais
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro Henrique Pinheiro de Almeida"
}

### Update Profile - Email com caracteres especiais
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "email": "pedro.henrique+teste@gmail.com"
}

### Update Profile - Campos vazios
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "",
  "email": ""
}

### ========================================
### TESTES DE SEGURANÇA - USER MODULE
### ========================================

### Update Profile - SQL Injection attempt
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro'; DROP TABLE users; --",
  "email": "pedro@example.com"
}

### Update Profile - XSS attempt
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "<script>alert('XSS')</script>",
  "email": "pedro@example.com"
}

### ========================================
### TESTES DE CONFIGURAÇÃO - USER MODULE
### ========================================

### Teste com Content-Type diferente
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: text/plain

{
  "name": "Pedro Almeida"
}

### Teste sem Content-Type
PUT {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}

{
  "name": "Pedro Almeida"
}

### ========================================
### TESTES DE ENDPOINTS INEXISTENTES - USER MODULE
### ========================================

### Endpoint inexistente no módulo user
GET {{baseUrl}}/users/endpoint-inexistente
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

### Método não permitido
POST {{baseUrl}}/users/profile
Authorization: Bearer {{testToken}}
Content-Type: {{contentType}}

{
  "name": "Pedro Almeida"
}

### ========================================
### INSTRUÇÕES DE USO - USER MODULE
### ========================================

### Como testar o módulo User:
### 1. Execute primeiro os testes de autenticação para garantir que o token funciona
### 2. Teste o GET /users/profile para verificar se o usuário existe
### 3. Teste o PUT /users/profile para atualizar dados
### 4. Teste o GET /users/statistics para verificar estatísticas
### 5. Teste o DELETE /users/profile para desativar (opcional)
### 6. Execute os testes de stress para verificar performance
### 7. Execute os testes de validação para verificar regras de negócio
### 8. Execute os testes de segurança para verificar proteções

### Dicas específicas para o módulo User:
### - O token de teste "test-token-pedro-almeida" sempre funciona
### - O usuário Pedro Almeida deve existir no banco de dados
### - Verifique os logs do backend durante os testes
### - Monitore o banco de dados para verificar as atualizações
### - Teste diferentes cenários de erro e validação
### - Verifique se o sistema de logging está funcionando
### - Teste a performance com múltiplas requisições simultâneas

### ========================================
### VARIÁVEIS DE AMBIENTE (se necessário)
### ========================================

### Para testar em ambiente diferente, altere a variável @baseUrl:
### @baseUrl = https://api.transcribe.gwan.br/api/v1

### Para testar com token JWT real (quando implementado):
### @testToken = seu-jwt-token-real-aqui 